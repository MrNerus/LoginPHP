.fullPage {
    width: 100%;
    min-height: 100vh;
    min-height: 100svh;
}
.centerElement {
    display: flex;
    align-items: center;
    justify-content: center;
}
.isFlex        { display: flex; }
.alignCenter   { align-items: center; }
.justifyCenter { justify-content: center; }
.flexRow       { flex-direction: row; }
.flexCol       { flex-direction: column; }
.flexWrap      { flex-wrap: wrap; }
.gap1          { gap: 1rem; }
.gapHalf       { gap: 0.5rem; }

.borderBox      { box-sizing: border-box; }
.rounding       { border-radius: var(--rounding); }
.roundingTight  { border-radius: var(--roundingTight); }
.overFlowHidden { overflow: hidden; }
.width20        { width: 20rem; }
.fullWidth      { width: 100%; }
.aspectRatio1_1 { aspect-ratio: 1}
.flexShrink { flex-shrink: 1;}

.fitCover { object-fit: cover; }

.innerSpace1              { padding: 1rem; }
.innerSpaceHalf           { padding: 0.5rem; }
.innerSpaceVertical1      { padding-top: 1rem; padding-bottom: 1rem; }
.innerSpaceVerticalHalf   { padding-top: 0.5rem; padding-bottom: 0.5rem}
.innerSpaceHorizontal1    { padding-left: 1rem; padding-right: 1rem; }
.innerSpaceHorizontalHalf { padding-left: 0.5rem; padding-right: 0.5rem}

.transition { transition: var(--transition); }

.shadowText             { box-shadow: 0 0 0 0.1rem var(--colorText); }
.shadowTextHover        { box-shadow: 0 0 0 0.0rem var(--colorText); }
.shadowTextHover:hover  { box-shadow: 0 0 0 0.1rem var(--colorText); }
.shadowOk               { box-shadow: 0 0 0 0.1rem var(--colorOK); }
.shadowOkHover          { box-shadow: 0 0 0 0.0rem var(--colorOK); }
.shadowOkHover:hover    { box-shadow: 0 0 0 0.1rem var(--colorOK); }
.shadowNotOk            { box-shadow: 0 0 0 0.1rem var(--colorNotOK); }
.shadowNotOkHover       { box-shadow: 0 0 0 0.0rem var(--colorNotOK); }
.shadowNotOkHover:hover { box-shadow: 0 0 0 0.1rem var(--colorNotOK); }

.textLeft { text-align: left; }
.neutral { text-decoration: none; color:var(--colorText) }

.cursorPointer { cursor: pointer; }



form {
    width: 25rem;
    border-radius: 1rem;
    border: 1px solid var(--colorOK);
    transition: var(--transition);
    box-sizing: border-box;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}
form:has( input[required]:placeholder-shown, input:invalid) {
    border: 1px solid var(--colorNotOK)
}
form input[type='submit'] {
    color: var(--colorBG);
    background-color: var(--colorOK);
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    transition: var(--transition);
    outline: none;
    border: none;
    cursor: pointer;
    font-size: 1rem;
}
form:has( input[required]:placeholder-shown, input:invalid) input[type="submit"] {
    background-color: var(--colorNotOK);
}
.userInput {
    width: 100%;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    box-sizing: border-box;
    position: relative;
    display: flex;
    flex-direction: row;
    gap: 1rem;
}
.userInput:has(> input[type='text']), .userInput:has(> select) {
    box-shadow: 0 0 0.5rem 0 var(--colorOK);
    transition: var(--transition);

}
.userInput:has(> input[required]:placeholder-shown, input:invalid  ),
.userInput:has(> select:placeholder-shown, select:invalid  ) {
    box-shadow: 0 0 0.5rem 0 var(--colorNotOK);
}
.userInput label {
    position: absolute;
    top:50%;
    left:1rem;
    transform: translate(0,-50%);
    font-size: 1rem;
    transition: var(--transition);
    color: var(--colorOK);
    background-color: var(--colorBG);
    box-shadow: 0 0 0 0.1rem var(--colorBG);
}
.userInput:has(> input[type='text']:not(:placeholder-shown), input[type='text']:focus) label,
.userInput:has(> select:not(:placeholder-shown), select:focus) label
 {
    top: 0;
    left: 0.5rem;
    font-size: 0.8rem;
}
.userInput:has(> input[required]:placeholder-shown, input:invalid) label {
    color: var(--colorNotOK)
}

.userInput input[type='text'] {
    border: none;
    width: 100%;
    font-size: 1rem;
    background-color: var(--colorBG);
    color: var(--colorText)
}
.userInput input[type='text']:focus, 
.userInput select:focus { outline: none; }

.userInput input[type="button"].showPassword {
    background-color: var(--transparantBright);
    color: var(--colorOK);
    border: none;
    transition: var(--transition);
}

.userInput input[type="text"][required]:placeholder-shown ~ input[type="button"].showPassword,
.userInput input[type="text"]:invalid ~  input[type="button"].showPassword{ color: var(--colorNotOK); }

.userInput:has(input[type="button"].showPassword:not(:active)) input[content="secured"] {
    text-security: disc;
    -webkit-text-security: disc;
    -moz-text-security: disc;
}
.userInput:has(.toggleOutline) .toggleOutline {
    position: relative;
    height: 1rem;
    box-sizing: border-box;
    border-radius: 0.5rem;
    margin: 0 1rem;
    width: 2rem;
    transition: var(--transition);
}
.userInput:has(.toggleOutline) .toggleOutline[dataToggle = "off"] {
    background-color: var(--colorNotOK);
}
.userInput:has(.toggleOutline) .toggleOutline[dataToggle = "on"] {
    background-color: var(--colorOK);
}
.userInput:has(.toggleOutline) .toggleOutline .toggleSlide {
    position: absolute;
    height: 0.5rem;
    width: 0.5rem;
    box-sizing: border-box;
    border-radius: 50%;
    top: 50%;
    transition: var(--transition);
    background-color: var(--colorBG);
}
.userInput:has(.toggleOutline) .toggleOutline[dataToggle = "off"] .toggleSlide {
    left: calc(0.2rem + 0.25rem);
    transform: translate(-50%, -50%);
}
.userInput:has(.toggleOutline) .toggleOutline[dataToggle = "on"] .toggleSlide {
    /* right: calc(0.1rem - 0.25rem); */
    right: calc(0.2rem + 0.25rem);
    transform: translate(50%, -50%);
}
.userInput:has(.toggleOutline) label {
    position: relative;
    transform: translate(0,0);
}
.userInput:has(.toggleOutline) input[type="checkbox"] {
    display: none;
}
.userInput:has(textarea) label, .userInput:has(input[type="file"]) label { position: relative; left: 0; top: 0; transform: translate(0,0);}
.userInput:has(textarea), .userInput:has(input[type="file"]) { gap: 1rem; }


.userInput:has(select) select {
    border: none;
    width: 100%;
    font-size: 1rem;
    background-color: var(--colorBG);
}
.userInput:has(select) select option {
    border: none;
    width: 100%;
    font-size: 1rem;
    background-color: var(--colorBG);

}

.navBar {
    width: 100%;
    height: auto;
    display: flex;
    justify-content: flex-end;
    flex-direction: row;
    gap: 1rem;
    padding: 0.5rem 1rem;
    box-sizing: border-box;
    
}
.navBar a {
    padding: 0.5rem 1rem;
    transition: var(--transition);
    box-shadow: 0 0 0 0.1rem var(--transparantBright);
    border-radius: 0.25rem;
    color: var(--colorText);
    text-decoration: none;
}
.navBar a:hover {
    box-shadow: 0 0 0 0.1rem var(--colorOK);
}



@media screen and (max-width: 25rem) {
    .form { width: 95%; }
    
}

